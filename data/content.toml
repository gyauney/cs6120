# Introductions

[[classes]]
title = "Welcome & Overview"
[[classes.readings]]
name = "On Proebsting’s Law"
link = "https://pdfs.semanticscholar.org/0a2b/1aa8bb63fb545f7f41233e5d6c0206486ccc.pdf"
details = "Kevin Scott"

[[classes]]
title = "Performance and Measurement"
leader = "Adrian"
[[classes.readings]]
name = "Producing Wrong Data Without Doing Anything Obviously Wrong!"
link = "https://dl.acm.org/citation.cfm?id=1508275"
details = "Todd Mytkowicz, Amer Diwan, Matthias Hauswirth, and Peter F. Sweeney. ASPLOS 2009."
[[classes.readings]]
name = "SIGPLAN Empirical Evaluation Guidelines"
link = "https://www.sigplan.org/Resources/EmpiricalEvaluation/"


# Classic Analysis & Optimization

[[classes]]
title = "Representing Programs"
notes = [
  "Concrete syntax, abstract syntax trees, instructions, control flow graphs, and basic blocks.",
  "An introduction to [Bril](https://github.com/sampsyo/bril).",
  "Derive the algorithm for forming basic blocks and CFGs thereof from flat lists of instructions. Then implement them for Bril.",
  "For more reading, try Chapter 2 of [*Static Program Analysis*](https://cs.au.dk/~amoeller/spa/spa.pdf) by Anders Møller and Michael I. Schwartzbach.",
  "Homework: Implement a CFG extractor. Convince yourself it's correct.",
]

[[classes]]
title = "Local Analysis & Optimization"
notes = [
  "Report back on your CFG extractor.",
  "Derive algorithms for simple dead code elimination: deleting globally unused instructions and locally \"killed\" instructions.",
  "Local vs. global reasoning.",
  'Homework: Implement "trivial" dead code elimination, in which you delete instructions that are never used before they are reassigned. Remember to iterate to convergence.',
]

[[classes]]
title = "Local Value Numbering"
notes = [
  "Consider the common thread between dead code elimination (DCE), copy propagation, and common subexpression elimination.",
  "Value numbering is a general framework for understanding & optimizing computations.",
  "If you can deeply understand the mystical metaphysics of value numbering, you will have gotten most of what you need to get out of this part of 6120.",
  "For more context and an alternate presentation, see [these slides from Phil Gibbons at CMU](https://www.cs.cmu.edu/~15745/lectures/L3-Local-Opts.pdf).",
  "Homework: Implement local value numbering. Make sure it eliminates some common subexpressions. Try pairing it with trivial dead code elimination as a post-processing step.",
]

[[classes]]
title = "Extending Value Numbering"
notes = [
  "LVN can subsume constant folding, copy propagation, and algebraic identities. You will need to extend it with language semantics.",
  "Write complete pseudocode for the base LVN algorithm, and work out where the \"extension points\" need to be to capture those optimizations.",
  "Homework: Extend your LVN implementation to optimize the trickier examples given in class.",
]

[[classes]]
title = "Data Flow"
notes = [
  "Follow up from last time: annotate the LVN pseudocode with extension points.",
  "*Reaching definitions* are an example of a global property that require you to look at an entire CFG.",
  "Terminology: definition, use, available, kills.",
  "The data flow framework.",
  "Instantiating the the data flow framework for reaching definitions.",
  "The worklist algorithm for solving data flow.",
  "For a longer introduction to data flow, see [the CS 4120 notes](http://www.cs.cornell.edu/courses/cs4120/2019sp/lectures/20dataflow/lec20-sp16.pdf).",
  "For more on fixed point algorithms for solving data flow, see Section 5.3 of [*Static Program Analysis*](https://cs.au.dk/~amoeller/spa/spa.pdf).",
]

[[classes]]
title = "Instantiating Data Flow"
notes = [
  "More on solving data flow equations with a worklist algorithm.",
  "The requirements for a general data flow analysis.",
  "Demonstrating a simple generic implementation.",
  "More examples of things you can do with the data flow framework.",
  "Homework: Implement at least one data flow analysis. For bonus “points,” implement a generic solver that supports multiple analyses.",
]

[[classes]]
title = "Global Analysis"
notes = [
  "Dominators & post-dominators.",
  "An algorithm for finding dominators.",
  "Reducible control flow & natural loops.",
  "Loop-invariant code motion.",
  "Homework: Implement the algorithm for finding domintors. For bonus “points,” also try computing the dominance tree and the domination frontier.",
]

[[classes]]
title = "Static Single Assignment (SSA)"
notes = [
  "Defining SSA.",
  "Derive the algorithms for converting to and from SSA.",
  "An application: global value numbering.",  # Maybe needs its own session.
  "Homework: Implement the “into SSA” and “out of SSA” transformations on Bril functions.",
]


# Fancy Optimization

[[classes]]
title = "Alias Analysis"
notes = [
  "Stating the alias analysis problem. May alias & must alias.",
  "Instantiating data flow for intraprocedural alias analysis.",
  "Heap models.",
  "Scalable & precise alias analysis remains an open problem. For much more, see [*Pointer Analysis*](https://yanniss.github.io/points-to-tutorial15.pdf), a tutorial by Yannis Smaragdakis and George Balatsouras.",
]

[[classes]]
title = "Alias-Based Optimization"
leader = "Yuan"
[[classes.readings]]
name = "Type-Based Alias Analysis"
link = "https://dl.acm.org/citation.cfm?id=277670"
details = "Amer Diwan, Kathryn S. McKinley, and J. Eliot B. Moss."

[[classes]]
title = "Basic Block Placement"
leader = "Gautam & Eashan"
[[classes.readings]]
name = "Codestitcher: inter-procedural basic block layout optimization"
link = "https://dl.acm.org/citation.cfm?id=3307358"
details = "Rahman Lavaee, John Criswell, and Chen Ding. CC 2019."

[[classes]]
title = "Instruction Scheduling"
leader = "Henry & Wen-Ding"
[[classes.readings]]
name = "Efficient instruction scheduling for a pipelined architecture"
link = "https://dl.acm.org/citation.cfm?id=13312"
details = "Philip B. Gibbons and Steven S. Muchnick. CC 1986."

[[classes]]
title = "Loop Optimization"
leader = "Horace & Gabriela"
[[classes.readings]]
name = "Compiler optimizations for improving data locality"
link = "https://dl.acm.org/citation.cfm?id=195557"
details = "Steve Carr, Kathryn S. McKinley, and Chau-Wen Tseng. ASPLOS 1994."


# LLVM

[[classes]]
title = "LLVM Overview"
leader = "Adrian"
[[classes.readings]]
name = "LLVM for Grad Students"
link = "https://www.cs.cornell.edu/~asampson/blog/llvm.html"


# Parallelism

# Perhaps a "basics" lecture in here?

[[classes]]
title = "Shared-Memory Parallelism"
leader = "Hongbo"
[[classes.readings]]
name = "The “Double-Checked Locking is Broken” Declaration"
link = "https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"
details = "David Bacon, Joshua Bloch, Jeff Bogda, Cliff Click, Paul Haahr, Doug Lea, Tom May, Jan-Willem Maessen, Jeremy Manson, John D. Mitchell, Kelvin Nilsen, Bill Pugh, and Emin Gün Sirer."

[[classes]]
title = "Memory Consistency"
leader = "Neil & Edwin"
[[classes.readings]]
name = "Threads cannot be implemented as a library"
link = "https://dl.acm.org/citation.cfm?id=1065042"
details = "Hans-J. Boehm. PLDI 2005."

[[classes]]
title = "Thread-Level Speculation"
leader = "Drew & Josh"
[[classes.readings]]
name = "POSH: a TLS compiler that exploits program structure"
link = "https://dl.acm.org/citation.cfm?id=1122997"
details = "Wei Liu, James Tuck, Luis Ceze, Wonsun Ahn, Karin Strauss, Jose Renau, and Josep Torrellas. PPoPP 2006."

# Something about vectorization or GPUs?


# Profiling & Dynamic Compilers

[[classes]]
title = "Profiling"
leader = "Dietrich"
[[classes.readings]]
name = "Efficient path profiling"
link = "https://dl.acm.org/citation.cfm?id=243857"
details = "Thomas Ball and James R. Larus. MICRO 1996."

[[classes]]
title = "Dynamic Languages"
leader = "Rachit"
[[classes.readings]]
name = "An efficient implementation of SELF, a dynamically-typed object-oriented language based on prototypes"
link = "http://portal.acm.org/citation.cfm?id=74884"
details = "C. Chambers, D. Ungar, and E. Lee. OOPSLA 1989."

[[classes]]
title = "Tracing"
leader = "Phil"
[[classes.readings]]
name = "Trace-based just-in-time type specialization for dynamic languages"
details = "Andreas Gal, Brendan Eich, Mike Shaver, David Anderson, David Mandelin, Mohammad R. Haghighat, Blake Kaplan, Graydon Hoare, Boris Zbarsky, Jason Orendorff, Jesse Ruderman, Edwin W. Smith, Rick Reitmaier, Michael Bebenita, Mason Chang, and Michael Franz. PLDI 2009."
link = "https://dl.acm.org/citation.cfm?id=1542476.1542528"

[[classes]]
title = "Meta-JITs"
leader = "Sameer"
[[classes.readings]]
name = "One VM to rule them all"
link = "https://dl.acm.org/citation.cfm?id=2509581"
details = "Thomas Würthinger, Christian Wimmer, Andreas Wöß, Lukas Stadler, Gilles Duboscq, Christian Humer, Gregor Richards, Doug Simon, and Mario Wolczko. Onward! 2013."


# Memory Management

[[classes]]
title = "Memory Allocation"
leader = "Oliver"
[[classes.readings]]
name = "Reconsidering custom memory allocation"
link = "https://dl.acm.org/citation.cfm?id=582421"
details = "Emery D. Berger, Benjamin G. Zorn, and Kathryn S. McKinley. OOPSLA 2002."

[[classes]]
title = "Garbage Collection"
# Basics lecture.

[[classes]]
title = "GC & Reference Counting"
leader = "Mark & Qian"
[[classes.readings]]
name = "A Unified Theory of Garbage Collection"
link = "https://dl.acm.org/citation.cfm?id=1028982"
details = "David F. Bacon, Perry Cheng, and V. T. Rajan. OOPSLA 2004."

[[classes]]
title = "Modern Garbage Collection"
leader = "Siqiu"
[[classes.readings]]
name = "Immix: a mark-region garbage collector with space efficiency, fast collection, and mutator performance"
link = "https://dl.acm.org/citation.cfm?id=1375586"
details = "Stephen M. Blackburn and Kathryn S. McKinley. PLDI 2008."

[[classes]]
title = "Conservative Garbage Collection"
leader = "Yi"
[[classes.readings]]
name = "Space efficient conservative garbage collection"
details = "Hans-J. Boehm. PLDI 1993."
link = "https://dl.acm.org/citation.cfm?id=155109"


# Fancy Hardware

[[classes]]
title = "Spatial Architectures"
leader = "Sean"
[[classes.readings]]
name = "Scaling to the End of Silicon with EDGE Architectures"
link = "https://ieeexplore.ieee.org/document/1310240"
details = "Doug Burger, Stephen W. Keckler, Kathryn S. McKinley, Mike Dahlin, Lizy K. John, Calvin Lin, Charles R. Moore, James Burrill, Robert G. McDonald, William Yoder, and the TRIPS Team. IEEE Computer in 2004."
[[classes.readings]]
name = "A spatial path scheduling algorithm for EDGE architectures"
details = "Katherine E. Coons, Xia Chen, Doug Burger, Kathryn S. McKinley, and Sundeep K. Kushwaha. ASPLOS 2006."
link = "https://dl.acm.org/citation.cfm?id=1168875"

[[classes]]
title = "Synthesis-Aided Compilers"
leader = "Katy & Shaojie"
[[classes.readings]]
name = "Chlorophyll: synthesis-aided compiler for low-power spatial architectures"
link = "https://dl.acm.org/citation.cfm?id=2594339"
details = "Phitchaya Mangpo Phothilimthana, Tikhon Jelvis, Rohin Shah, Nishant Totla, Sarah Chasins, and Rastislav Bodik. PLDI 2014."

[[classes]]
title = "Dynamic Binary Translation"
leader = "Ryan"
[[classes.readings]]
name = "The Transmeta Code Morphing™ Software: using speculation, recovery, and adaptive retranslation to address real-life challenges"
link = "https://dl.acm.org/citation.cfm?id=776263"
details = "James C. Dehnert, Brian K. Grant, John P. Banning, Richard Johnson, Thomas Kistler, Alexander Klaiber, and Jim Mattson. CGO 2003."


# Compiler Correctness

[[classes]]
title = "Compiler Fuzzing I"
leader = "Zhijing & Chris"
[[classes.readings]]
name = "Finding and understanding bugs in C compilers"
link = "https://dl.acm.org/citation.cfm?id=1993532"
details = "Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. PLDI 2011."

[[classes]]
title = "Compiler Fuzzing II"
leader = "Rolph & Greg"
[[classes.readings]]
name = "Compiler validation via equivalence modulo inputs"
link = "https://dl.acm.org/citation.cfm?id=2594334"
details = "Vu Le, Mehrdad Afshari, and Zhendong Su. PLDI 2014."

[[classes]]
title = "Automatic Verification"
leader = "Alexa"
[[classes.readings]]
name = "Provably correct peephole optimizations with Alive"
link = "https://dl.acm.org/citation.cfm?id=2737965"
details = "Nuno P. Lopes, David Menendez, Santosh Nagarakatte, and John Regehr. PLDI 2015."

[[classes]]
title = "Interactive Verification"
leader = "Daniel W. & Sam"
[[classes.readings]]
name = "Formal verification of a realistic compiler."
link = "https://dl.acm.org/citation.cfm?id=1538814"
details = "Xavier Leroy. CACM in 2009."


# Potpourri

[[classes]]
title = "WebAssembly"
leader = "TBD"
[[classes.readings]]
name = "Bringing the web up to speed with WebAssembly"
link = "https://dl.acm.org/citation.cfm?id=3062363"
details = "Andreas Haas, Andreas Rossberg, Derek L. Schuff, Ben L. Titzer, Michael Holman, Dan Gohman, Luke Wagner, Alon Zakai, and JF Bastien. PLDI 2017."

[[classes]]
title = "Link-Time Optimization"
leader = "TBD"
[[classes.readings]]
name = "ThinLTO: Scalable and incremental LTO"
link = "https://ieeexplore.ieee.org/document/7863733"
details = "Teresa Johnson, Mehdi Amini, and Xinliang David Li. CGO 2017."

[[classes]]
title = "Gradual Typing"
leader = "TBD"
[[classes.readings]]
name = "Is Sound Gradual Typing Dead?"
link = "https://dl.acm.org/citation.cfm?id=2837630"
details = "Asumu Takikawa, Daniel Feltey, Ben Greenman, Max S. New, Jan Vitek, and Matthias Felleisen. POPL 2016."
